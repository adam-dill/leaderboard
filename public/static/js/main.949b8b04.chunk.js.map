{"version":3,"sources":["data/dataAdapter.js","screens/home.js","screens/api.js","App.js","serviceWorker.js","index.js"],"names":["DataAdapter","_url","fetch","this","id","HomeScreen","props","_adapter","state","games","scores","currentSelection","undefined","loadGames","listGames","map","item","key","onClick","handleGameClick","bind","name","className","data","columns","getScoreColumns","defaultPageSize","getGames","response","json","setState","gameId","getGameScores","e","classList","remove","currentTarget","add","loadScores","scoreColumns","forEach","prop","indexOf","push","sort","returnValue","Header","accessor","value","Number","React","Component","ApiScreen","App","to","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2UAAqBA,E,iDAGjBC,KAAO,mC,iLAIUC,MAAMC,KAAKF,KAAO,U,2NAGfG,G,iFACHF,MAAMC,KAAKF,KAAO,WAAaG,G,+JCL/BC,G,0BAGjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAHVC,SAAW,IAAIP,EAIX,EAAKQ,MAAQ,CACTC,MAAO,GACPC,OAAQ,GACRC,sBAAkBC,GALP,E,iFAUfT,KAAKU,c,+BAGC,IAAD,OACDC,EAAYX,KAAKK,MAAMC,MAAMM,KAAI,SAACC,EAAMC,GAAP,OAAgB,wBAAIA,IAAKD,EAAKZ,GAAIc,QAAS,EAAKC,gBAAgBC,KAAK,EAAKJ,IAAQA,EAAKK,SAC5H,OACI,6BACI,wBAAIC,UAAU,uBACRR,GAEN,kBAAC,IAAD,CAAYS,KAAMpB,KAAKK,MAAME,OACjBc,QAASrB,KAAKsB,kBACdC,gBAAiB,Q,oKAMhBvB,KAAKI,SAASoB,W,cAA/BC,E,gBACaA,EAASC,O,OAAtBA,E,OACJ1B,KAAK2B,SAAS,CAACrB,MAAOoB,EAAKN,O,gLAGdQ,G,yFACQ5B,KAAKI,SAASyB,cAAcD,G,cAA7CH,E,gBACaA,EAASC,O,OAAtBA,E,OACJ1B,KAAK2B,SAAS,CAACpB,OAAQmB,EAAKN,O,6IAGhBP,EAAMiB,QACkBrB,IAAhCT,KAAKK,MAAMG,kBACXR,KAAKK,MAAMG,iBAAiBuB,UAAUC,OAAO,YAEjDhC,KAAKK,MAAMG,iBAAmBsB,EAAEG,cAChCjC,KAAKK,MAAMG,iBAAiBuB,UAAUG,IAAI,YAC1ClC,KAAKmC,WAAWtB,EAAKZ,M,wCAIrB,IAAImC,EAAe,GACnBpC,KAAKK,MAAME,OAAO8B,SAAQ,SAACxB,GACvB,IAAK,IAAIyB,KAAQzB,EAAKN,OACL,KAAT+B,IACgC,IAAhCF,EAAaG,QAAQD,IACrBF,EAAaI,KAAKF,MAIjBF,EAAaK,OAA1B,IACIC,EAAc,CACd,CACIC,OAAQ,OACRC,SAAU,eAEd,CACID,OAAQ,YACRC,SAAU,cAYlB,OATAR,EAAaC,SAAQ,SAACxB,GAClB6B,EAAYF,KAAK,CACbvC,GAAIY,EACJ8B,OAAQ9B,EACR+B,SAAU,SAAAC,GACN,OAAOA,EAAMtC,OAAOM,GAAQiC,OAAOD,EAAMtC,OAAOM,IAAS,QAI9D6B,M,GAjFyBK,IAAMC,YCJzBC,E,iLAEb,OACI,gE,GAH2BF,IAAMC,WC8B9BE,MA1Bf,WACE,OACE,kBAAC,IAAD,KACE,yBAAK/B,UAAU,OACb,4BAAQA,UAAU,cAChB,4BAAI,kBAAC,IAAD,CAAMgC,GAAG,KAAT,iBACJ,6BACE,4BACE,4BAAI,kBAAC,IAAD,CAAMA,GAAG,KAAT,WACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,QAAT,WAIV,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,QACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,WCZQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.949b8b04.chunk.js","sourcesContent":["export default class DataAdapter {\n\n    /** The api url. */\n    _url = \"http://leaderboards.adamdill.com\";\n\n\n    async getGames() {\n        return await fetch(this._url + \"/games\");\n    }\n\n    async getGameScores(id) {\n        return await fetch(this._url + \"/scores/\" + id);\n    }\n}","import React from 'react';\nimport DataAdapter from '../data/dataAdapter';\nimport ReactTable from 'react-table';\nimport 'react-table/react-table.css';\nimport { throwStatement } from '@babel/types';\n\nexport default class HomeScreen extends React.Component {\n    _adapter = new DataAdapter();\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            games: [],\n            scores: [],\n            currentSelection: undefined,\n        };\n    }\n\n    componentDidMount() {\n        this.loadGames();\n    }\n\n    render() {\n        let listGames = this.state.games.map((item, key) =>  <li key={item.id} onClick={this.handleGameClick.bind(this,item)}>{item.name}</li> );\n        return (\n            <div>\n                <ul className=\"game-list-container\">\n                    { listGames }\n                </ul>\n                <ReactTable data={this.state.scores} \n                            columns={this.getScoreColumns()}\n                            defaultPageSize={10} />\n            </div>\n        );\n    }\n\n    async loadGames() {\n        let response = await this._adapter.getGames();\n        let json = await response.json();\n        this.setState({games: json.data});\n    }\n\n    async loadScores(gameId) {\n        let response = await this._adapter.getGameScores(gameId);\n        let json = await response.json();\n        this.setState({scores: json.data});\n    }\n\n    handleGameClick(item, e) {\n        if (this.state.currentSelection !== undefined) {\n            this.state.currentSelection.classList.remove('selected');\n        }\n        this.state.currentSelection = e.currentTarget;\n        this.state.currentSelection.classList.add('selected');\n        this.loadScores(item.id);\n    }\n\n    getScoreColumns() {\n        let scoreColumns = [];\n        this.state.scores.forEach((item) => {\n            for (let prop in item.scores) {\n                if (prop === \"\") { continue; }\n                if (scoreColumns.indexOf(prop) === -1) {\n                    scoreColumns.push(prop);\n                }\n            }\n        });\n        let sorted = scoreColumns.sort();\n        let returnValue = [\n            {\n                Header: 'Name',\n                accessor: 'player_name',\n            },\n            {\n                Header: 'Timestamp',\n                accessor: 'timestamp',\n            }\n        ];\n        scoreColumns.forEach((item) => {\n            returnValue.push({\n                id: item,\n                Header: item,\n                accessor: value => {\n                    return value.scores[item] ? Number(value.scores[item]) : 0;\n                },\n            });\n        });\n        return returnValue;\n    }\n}","import React from 'react';\n\nexport default class ApiScreen extends React.Component {\n    render() {\n        return (\n            <p>Service API is to be written.</p>\n        );\n    }\n}","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport HomeScreen from './screens/home';\nimport ApiScreen from './screens/api';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1><Link to=\"/\">LeaderBoards</Link></h1>\n          <nav>\n            <ul>\n              <li><Link to=\"/\">Scores</Link></li>\n              <li><Link to=\"/api\">API</Link></li>\n            </ul>\n          </nav>\n        </header>\n        <Switch>\n          <Route path=\"/api\">\n            <ApiScreen />\n          </Route>\n          <Route path=\"/\">\n            <HomeScreen />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}