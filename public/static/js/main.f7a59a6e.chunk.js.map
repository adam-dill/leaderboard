{"version":3,"sources":["data/dataAdapter.js","screens/home.js","screens/api.js","App.js","serviceWorker.js","index.js"],"names":["DataAdapter","_url","fetch","this","id","HomeScreen","props","_adapter","state","games","scores","currentSelection","undefined","loadGames","listGames","map","item","key","onClick","handleGameClick","bind","name","start","length","max","i","push","className","data","columns","getScoreColumns","defaultPageSize","getGames","response","json","setState","gameId","getGameScores","e","classList","remove","currentTarget","add","loadScores","scoreColumns","forEach","prop","indexOf","sort","returnValue","Header","accessor","value","Number","React","Component","ApiScreen","App","to","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2UAAqBA,E,iDAGjBC,KAAO,mC,iLAIUC,MAAMC,KAAKF,KAAO,U,2NAGfG,G,iFACHF,MAAMC,KAAKF,KAAO,WAAaG,G,+JCL/BC,G,0BAGjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAHVC,SAAW,IAAIP,EAIX,EAAKQ,MAAQ,CACTC,MAAO,GACPC,OAAQ,GACRC,sBAAkBC,GALP,E,iFAUfT,KAAKU,c,+BAOL,IAJM,IAAD,OACDC,EAAYX,KAAKK,MAAMC,MAAMM,KAAI,SAACC,EAAMC,GAAP,OAAgB,wBAAIA,IAAKA,EAAKC,QAAS,EAAKC,gBAAgBC,KAAK,EAAKJ,IAAQA,EAAKK,SACpHC,EAAQR,EAAUS,OAClBC,EAAMV,EAAUS,OAAS,EACpBE,EAAIH,EAAOG,EAAID,EAAKC,IACzBX,EAAUY,KAAK,wBAAIT,IAAKQ,EAAGP,QAASf,KAAKgB,gBAAgBC,KAAKjB,UAAKS,IAApD,cAEnB,OACI,6BACI,wBAAIe,UAAU,uBACRb,GAEN,kBAAC,IAAD,CAAYc,KAAMzB,KAAKK,MAAME,OACjBmB,QAAS1B,KAAK2B,kBACdC,gBAAiB,Q,oKAMhB5B,KAAKI,SAASyB,W,cAA/BC,E,gBACaA,EAASC,O,OAAtBA,E,OACJ/B,KAAKgC,SAAS,CAAC1B,MAAOyB,EAAKN,O,gLAGdQ,G,yFACQjC,KAAKI,SAAS8B,cAAcD,G,cAA7CH,E,gBACaA,EAASC,O,OAAtBA,E,OACJ/B,KAAKgC,SAAS,CAACzB,OAAQwB,EAAKN,O,6IAGhBZ,EAAMsB,QACkB1B,IAAhCT,KAAKK,MAAMG,kBACXR,KAAKK,MAAMG,iBAAiB4B,UAAUC,OAAO,YAEjDrC,KAAKK,MAAMG,iBAAmB2B,EAAEG,cAChCtC,KAAKK,MAAMG,iBAAiB4B,UAAUG,IAAI,YAC1CvC,KAAKwC,WAAW3B,EAAKZ,M,wCAIrB,IAAIwC,EAAe,GACnBzC,KAAKK,MAAME,OAAOmC,SAAQ,SAAC7B,GACvB,IAAK,IAAI8B,KAAQ9B,EAAKN,OACL,KAAToC,IACgC,IAAhCF,EAAaG,QAAQD,IACrBF,EAAalB,KAAKoB,MAIjBF,EAAaI,OAA1B,IACIC,EAAc,CACd,CACIC,OAAQ,OACRC,SAAU,eAEd,CACID,OAAQ,YACRC,SAAU,cAYlB,OATAP,EAAaC,SAAQ,SAAC7B,GAClBiC,EAAYvB,KAAK,CACbtB,GAAIY,EACJkC,OAAQlC,EACRmC,SAAU,SAAAC,GACN,OAAOA,EAAM1C,OAAOM,GAAQqC,OAAOD,EAAM1C,OAAOM,IAAS,QAI9DiC,M,GAtFyBK,IAAMC,YCJzBC,E,iLAEb,OACI,gE,GAH2BF,IAAMC,WC8B9BE,MA1Bf,WACE,OACE,kBAAC,IAAD,KACE,yBAAK9B,UAAU,OACb,4BAAQA,UAAU,cAChB,4BAAI,kBAAC,IAAD,CAAM+B,GAAG,KAAT,iBACJ,6BACE,4BACE,4BAAI,kBAAC,IAAD,CAAMA,GAAG,KAAT,WACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,QAAT,WAIV,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,QACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,WCZQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f7a59a6e.chunk.js","sourcesContent":["export default class DataAdapter {\r\n\r\n    /** The api url. */\r\n    _url = \"http://leaderboards.adamdill.com\";\r\n\r\n\r\n    async getGames() {\r\n        return await fetch(this._url + \"/games\");\r\n    }\r\n\r\n    async getGameScores(id) {\r\n        return await fetch(this._url + \"/scores/\" + id);\r\n    }\r\n}","import React from 'react';\r\nimport DataAdapter from '../data/dataAdapter';\r\nimport ReactTable from 'react-table';\r\nimport 'react-table/react-table.css';\r\nimport { throwStatement } from '@babel/types';\r\n\r\nexport default class HomeScreen extends React.Component {\r\n    _adapter = new DataAdapter();\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            games: [],\r\n            scores: [],\r\n            currentSelection: undefined,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadGames();\r\n    }\r\n\r\n    render() {\r\n        let listGames = this.state.games.map((item, key) =>  <li key={key} onClick={this.handleGameClick.bind(this,item)}>{item.name}</li> );\r\n        let start = listGames.length;\r\n        let max = listGames.length + 1;\r\n        for (var i = start; i < max; i++) {\r\n            listGames.push(<li key={i} onClick={this.handleGameClick.bind(this,undefined)}>Game Name</li>);\r\n        }\r\n        return (\r\n            <div>\r\n                <ul className=\"game-list-container\">\r\n                    { listGames }\r\n                </ul>\r\n                <ReactTable data={this.state.scores} \r\n                            columns={this.getScoreColumns()}\r\n                            defaultPageSize={10} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    async loadGames() {\r\n        let response = await this._adapter.getGames();\r\n        let json = await response.json();\r\n        this.setState({games: json.data});\r\n    }\r\n\r\n    async loadScores(gameId) {\r\n        let response = await this._adapter.getGameScores(gameId);\r\n        let json = await response.json();\r\n        this.setState({scores: json.data});\r\n    }\r\n\r\n    handleGameClick(item, e) {\r\n        if (this.state.currentSelection !== undefined) {\r\n            this.state.currentSelection.classList.remove('selected');\r\n        }\r\n        this.state.currentSelection = e.currentTarget;\r\n        this.state.currentSelection.classList.add('selected');\r\n        this.loadScores(item.id);\r\n    }\r\n\r\n    getScoreColumns() {\r\n        let scoreColumns = [];\r\n        this.state.scores.forEach((item) => {\r\n            for (let prop in item.scores) {\r\n                if (prop === \"\") { continue; }\r\n                if (scoreColumns.indexOf(prop) === -1) {\r\n                    scoreColumns.push(prop);\r\n                }\r\n            }\r\n        });\r\n        let sorted = scoreColumns.sort();\r\n        let returnValue = [\r\n            {\r\n                Header: 'Name',\r\n                accessor: 'player_name',\r\n            },\r\n            {\r\n                Header: 'Timestamp',\r\n                accessor: 'timestamp',\r\n            }\r\n        ];\r\n        scoreColumns.forEach((item) => {\r\n            returnValue.push({\r\n                id: item,\r\n                Header: item,\r\n                accessor: value => {\r\n                    return value.scores[item] ? Number(value.scores[item]) : 0;\r\n                },\r\n            });\r\n        });\r\n        return returnValue;\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class ApiScreen extends React.Component {\r\n    render() {\r\n        return (\r\n            <p>Service API is to be written.</p>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport HomeScreen from './screens/home';\r\nimport ApiScreen from './screens/api';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h1><Link to=\"/\">LeaderBoards</Link></h1>\r\n          <nav>\r\n            <ul>\r\n              <li><Link to=\"/\">Scores</Link></li>\r\n              <li><Link to=\"/api\">API</Link></li>\r\n            </ul>\r\n          </nav>\r\n        </header>\r\n        <Switch>\r\n          <Route path=\"/api\">\r\n            <ApiScreen />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <HomeScreen />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}